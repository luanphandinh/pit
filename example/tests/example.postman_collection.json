{
    "info": {
        "_postman_id": "11fe7fe3-b6d1-453f-adbc-af5463bf9d5c",
        "name": "Example Fun Postman",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Suite name",
            "item": [
                {
                    "name": "Suite name",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://google.com",
                            "host": [
                                "https://google.com"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { runTest } = eval(pm.variables.get(\"t\"))(); runTest()"
                                ]
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const { describe, before, test } = eval(pm.variables.get(\"t\"))();\n",
                                    "describe(\"Suite name\", \"Here go the suite description\", () => {\n  before(\"200\", () => {\n    console.log(\"This will be called before sending request\");\n  });\n\n  test(\"200\", \"Test 200 description\", () => {\n    pm.response.to.have.status(200);\n  });\n\n  before(\"403\", () => {\n    console.log(\"This should call when init\");\n  });\n\n  test(\"403\", \"This test will be failed because return still 200\", () => {\n    pm.response.to.have.status(403);\n  });\n});"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "variable": [
        {
            "key": "t",
            "value": "isDescribing => {\n  let USE_MOCK = isDescribing;\n  const _postman_storage_mock_ = {};\n  _postman_mock_ = {};\n  _postman_mock_.setNextRequest = () => {};\n  const _pm_mock_ = {\n    variables: {\n      get: any => _postman_storage_mock_[any],\n      set: (key, val) => (_postman_storage_mock_[key] = val)\n    },\n    test: (msg, callback) => {\n      console.log(msg);\n      callback();\n    }\n  };\n\n  const _pm_ = () => {\n    if (USE_MOCK) {\n      return _pm_mock_;\n    }\n\n    return pm;\n  };\n\n  const _postman_ = () => {\n    if (USE_MOCK) {\n      return _postman_mock_;\n    }\n    return postman;\n  };\n\n  const mock = () => {\n    USE_MOCK = true;\n  };\n\n  const log = message => {\n    if (_pm_().variables.get(\"TEST_VERBOSE\") === 1) {\n      console.log(message);\n    }\n  };\n\n  const init = () => {\n    let pit = _pm_().variables.get(\"pit\");\n    pit = {\n      suite: {},\n      tests: {},\n      schedule: [],\n      lock: false\n    };\n    _pm_().variables.set(\"pit\", pit);\n  };\n\n  const set = (name, value) => {\n    const pit = _pm_().variables.get(\"pit\");\n    pit[name] = value;\n    _pm_().variables.set(\"pit\", pit);\n  };\n\n  const get = name => {\n    const pit = _pm_().variables.get(\"pit\");\n    return pit ? pit[name] : null;\n  };\n\n  const lock = () => {\n    set(\"lock\", true);\n  };\n\n  const unlock = () => {\n    set(\"lock\", false);\n  };\n\n  const isLock = () => {\n    return get(\"lock\");\n  };\n\n  const describe = (name, description, prepare) => {\n    if (isLock()) {\n      runBeforeTest();\n      return;\n    }\n\n    init();\n    set(\"suite\", {\n      name: name,\n      description: description,\n      callback: prepare.toString()\n    });\n\n    prepare();\n    lock();\n    runBeforeTest();\n    return _pm_().variables.get(\"pit\");\n  };\n\n  const test = (name, description, callback) => {\n    const tests = get(\"tests\");\n    const schedule = get(\"schedule\");\n\n    tests[name] = {\n      ...tests[name],\n      name: name,\n      description: description,\n      callback: callback.toString()\n    };\n    schedule.push(name);\n\n    set(\"tests\", tests);\n    set(\"schedule\", schedule);\n  };\n\n  const before = (name, callback) => {\n    const tests = get(\"tests\");\n    tests[name] = {\n      ...tests[name],\n      before: callback.toString()\n    };\n\n    set(\"tests\", tests);\n  };\n\n  const getCurrentTest = () => {\n    const tests = get(\"tests\");\n    const schedule = get(\"schedule\");\n    if (schedule.length > 0) {\n      return tests[schedule[0]];\n    }\n\n    return null;\n  };\n\n  const doneTest = () => {\n    suite = get(\"suite\");\n    schedule = get(\"schedule\");\n    schedule.shift();\n    set(\"schedule\", schedule);\n    if (schedule.length === 0) {\n      unlock();\n      log(`Test suite: ${suite.name} Done.`);\n    } else {\n      log(`Next scheduled tests: ${schedule}.`);\n      _postman_().setNextRequest(suite.name);\n    }\n  };\n\n  const runBeforeTest = () => {\n    if (USE_MOCK) {\n      return;\n    }\n    const test = getCurrentTest();\n    if (test.before) {\n      log(`Running pre-script for ${test.name}`);\n      eval(test.before)();\n      log(\"\\t Done.\");\n    } else {\n      log(`No pre-script for ${test.name}`);\n    }\n  };\n\n  const runTest = () => {\n    const test = getCurrentTest();\n    if (test.callback) {\n      log(`Running test for ${test.name} | ${test.description}`);\n      _pm_().test(test.description, () => eval(test.callback)());\n      log(\"\\t Done.\");\n    }\n    doneTest();\n  };\n\n  return {\n    log: log,\n    describe: describe,\n    test: test,\n    before: before,\n    runTest: runTest,\n    mock: mock\n  };\n};\n"
        }
    ]
}
