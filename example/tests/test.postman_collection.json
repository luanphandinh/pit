{
    "info": {
        "name": "Example Fun Postman",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Github",
            "item": [
                {
                    "name": "200Suite",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{request_url}}",
                            "host": [
                                "{{request_url}}"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { runTest } = eval(pm.variables.get(\"t\"))();\nrunTest();"
                                ]
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const { describe, before, test, sendRequest, dependOn } = eval(pm.variables.get(\"t\"))();\n",
                                    "describe(\"200\", () => {\n  before(\"200\", () => {\n    pm.variables.set(\n      \"request_url\",\n      \"https://api.github.com/users/luanphandinh\"\n    );\n  });\n\n  test(\"200\", \"Should be able to get my information from github\", () => {\n    pm.response.to.have.status(200);\n    const jsonData = pm.response.json();\n    pm.expect(jsonData.name).to.equal(\"Luan Phan\");\n  });\n});"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "googleSuite",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{request_url}}",
                    "host": [
                        "{{request_url}}"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "const { runTest } = eval(pm.variables.get(\"t\"))();\nrunTest();"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "const { describe, before, test, sendRequest, dependOn } = eval(pm.variables.get(\"t\"))();\n",
                            "describe(\"Let's check google\", () => {\n  before(\"200\", () => {\n    console.log(\"This will be called before sending request\");\n    console.log(\"{{request_url}} is hard_code, will be more dynamic later\");\n    pm.variables.set(\"request_url\", \"https://google.com\");\n  });\n\n  test(\"200\", \"Test 200 description\", () => {\n    pm.response.to.have.status(200);\n  });\n\n  before(\"404\", () => {\n    console.log(\"This should call when init\");\n    pm.variables.set(\"request_url\", \"https://google.com/404\");\n  });\n\n  test(\"404\", \"Test 404\", () => {\n    pm.response.to.have.status(404);\n  });\n});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "spotifySuite",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{spotify_api}}/{{version}}/{{endpoint}}",
                    "host": [
                        "{{spotify_api}}/{{version}}"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "const { runTest } = eval(pm.variables.get(\"t\"))();\nrunTest();"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "const { describe, before, test, sendRequest, dependOn } = eval(pm.variables.get(\"t\"))();\n",
                            "describe(\"Let's check spotify\", () => {\n  sendRequest({\n    method: \"GET\",\n    header: [],\n    url: {\n      raw: \"{{spotify_api}}/{{version}}/{{endpoint}}\",\n      host: [\"{{spotify_api}}/{{version}}\"]\n    }\n  });\n\n  before(\"401\", () => {\n    pm.variables.set(\"spotify_api\", \"https://api.spotify.com\");\n    pm.variables.set(\"version\", \"v1\");\n    pm.variables.set(\"endpoint\", \"tracks/2KrxsD86ARO5beq7Q0Drfqa\");\n  });\n\n  test(\"401\", \"I don't have any key so....\", () => {\n    const jsonData = pm.response.json();\n    pm.expect(jsonData.error.status).to.equal(401);\n    pm.expect(jsonData.error.message).to.equal(\"No token provided\");\n  });\n});"
                        ]
                    }
                }
            ]
        }
    ],
    "variable": [
        {
            "key": "t",
            "value": "isDescribing => {\n  let USE_MOCK = isDescribing;\n  const _postman_storage_mock_ = {};\n  _postman_mock_ = {};\n  _postman_mock_.setNextRequest = () => {};\n  const _pm_mock_ = {\n    variables: {\n      get: any => _postman_storage_mock_[any],\n      set: (key, val) => (_postman_storage_mock_[key] = val)\n    },\n    test: (msg, callback) => {\n      console.log(msg);\n      callback();\n    }\n  };\n\n  const _pm_ = () => {\n    if (USE_MOCK) {\n      return _pm_mock_;\n    }\n\n    return pm;\n  };\n\n  const _postman_ = () => {\n    if (USE_MOCK) {\n      return _postman_mock_;\n    }\n    return postman;\n  };\n\n  const log = message => {\n    if (_pm_().variables.get(\"TEST_VERBOSE\") === 1) {\n      console.log(message);\n    }\n  };\n\n  const init = () => {\n    pit = {\n      name: \"\",\n      callback: \"\",\n      tests: {},\n      schedule: [],\n      lock: false,\n      request: {},\n      dependencies: []\n    };\n\n    _pm_().variables.set(\"pit\", pit);\n  };\n\n  const set = (name, value) => {\n    const pit = _pm_().variables.get(\"pit\");\n    pit[name] = value;\n    _pm_().variables.set(\"pit\", pit);\n  };\n\n  const get = name => {\n    const pit = _pm_().variables.get(\"pit\");\n    return pit ? pit[name] : null;\n  };\n\n  const lock = () => {\n    set(\"lock\", true);\n  };\n\n  const unlock = () => {\n    set(\"lock\", false);\n  };\n\n  const isLock = () => {\n    return get(\"lock\");\n  };\n\n  const Describe = (name, callback) => {\n    if (isLock() && USE_MOCK !== true) {\n      runBeforeTest();\n      return;\n    }\n\n    init();\n    set(\"name\", name);\n    if (callback) {\n      set(\"callback\", callback.toString());\n      callback();\n    }\n\n    lock();\n    runBeforeTest();\n    return _pm_().variables.get(\"pit\");\n  };\n\n  const SendRequest = req => {\n    set(\"request\", req);\n  };\n\n  const DependOn = (...otherSuites) => {\n    set(\"dependencies\", otherSuites);\n  };\n\n  const Test = (name, description, callback) => {\n    const tests = get(\"tests\");\n    const schedule = get(\"schedule\");\n\n    tests[name] = {\n      ...tests[name],\n      name: name,\n      description: description,\n      callback: callback ? callback.toString() : \"\"\n    };\n    schedule.push(name);\n\n    set(\"tests\", tests);\n    set(\"schedule\", schedule);\n  };\n\n  const Before = (name, callback) => {\n    const tests = get(\"tests\");\n    tests[name] = {\n      ...tests[name],\n      before: callback ? callback.toString() : \"\"\n    };\n\n    set(\"tests\", tests);\n  };\n\n  const getCurrentTest = () => {\n    const tests = get(\"tests\");\n    const schedule = get(\"schedule\");\n    if (schedule.length > 0) {\n      return tests[schedule[0]];\n    }\n\n    return null;\n  };\n\n  const doneTest = () => {\n    suiteName = get(\"name\");\n    schedule = get(\"schedule\");\n    schedule.shift();\n    set(\"schedule\", schedule);\n    if (schedule.length === 0) {\n      unlock();\n      log(`Test suite: ${suiteName} Done.`);\n    } else {\n      log(`Next scheduled tests: ${schedule}.`);\n      _postman_().setNextRequest(suiteName);\n    }\n  };\n\n  const runBeforeTest = () => {\n    if (USE_MOCK) {\n      return;\n    }\n    const test = getCurrentTest();\n    if (test.before) {\n      log(`Running pre-script for ${test.name}`);\n      eval(test.before)();\n      log(\"\\t Done.\");\n    } else {\n      log(`No pre-script for ${test.name}`);\n    }\n  };\n\n  const RunTest = () => {\n    const test = getCurrentTest();\n    if (test.callback) {\n      log(`Running test for ${test.name} | ${test.description}`);\n      _pm_().test(test.description, () => eval(test.callback)());\n      log(\"\\t Done.\");\n    }\n    doneTest();\n  };\n\n  return {\n    describe: Describe,\n    test: Test,\n    before: Before,\n    runTest: RunTest,\n    sendRequest: SendRequest,\n    dependOn: DependOn\n  };\n};\n"
        }
    ]
}